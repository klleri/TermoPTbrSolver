import random
import unicodedata
import os
import sys

# Path to the word list file generated by process_word_list.py
WORD_LIST_FILE = 'palavras_5letras.txt'

WORD_LENGTH = 5
MAX_ATTEMPTS = 6 

# Use ANSI colors (may not work on all terminals)
USE_COLORS = True # Change to False if you can't see the colors

if USE_COLORS:
    COLOR_GREEN = '\033[92m'  # Green
    COLOR_YELLOW = '\033[93m' # Yellow
    COLOR_GRAY = '\033[90m'   # Gray
    COLOR_RESET = '\033[0m'   # Resets color to default
    LETTER_ABSENT_FORMAT = COLOR_GRAY + '{}' + COLOR_RESET
    LETTER_WRONG_POS_FORMAT = COLOR_YELLOW + '{}' + COLOR_RESET
    LETTER_CORRECT_POS_FORMAT = COLOR_GREEN + '{}' + COLOR_RESET
else:
    SYMBOL_ABSENT = '‚¨ú'
    SYMBOL_WRONG_POS = 'üü®'
    SYMBOL_CORRECT_POS = 'üü©'
    # Shows the letter next to the symbol
    LETTER_ABSENT_FORMAT = SYMBOL_ABSENT + ' {}' 
    LETTER_WRONG_POS_FORMAT = SYMBOL_WRONG_POS + ' {}' 
    LETTER_CORRECT_POS_FORMAT = SYMBOL_CORRECT_POS + ' {}' 


def remove_accents(text):
    # Removes accents from a string
    nfkd_form = unicodedata.normalize('NFKD', text)
    return "".join([c for c in nfkd_form if not unicodedata.combining(c)])

def load_words(filepath):
    if not os.path.exists(filepath):
        print(f"Fatal Error: O arquivo de palavras '{filepath}' n√£o foi encontrado.")
        return None
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            # Reads lines, removes extra spaces, converts to lowercase
            words = [remove_accents(line.strip().lower())
                     for line in f if len(line.strip()) == WORD_LENGTH]
        valid_words = set(words)
        if not valid_words:
             print(f"Erro: Nenhuma palavra v√°lida de {WORD_LENGTH} letras encontrada em '{filepath}'.")
             return None
        print(f"{len(valid_words)} palavras de {WORD_LENGTH} letras carregadas de '{filepath}'.")
        return valid_words
    except Exception as e:
        print(f"Erro ao ler o arquivo de palavras '{filepath}': {e}")
        return None

def choose_secret_word(valid_words):
    #Chooses a random word from the list
    if not valid_words:
        return None
    # Convert the set back to a list to use random.choice
    return random.choice(list(valid_words))

def get_player_guess(valid_words):
    #Asks the player for a guess and validates it
    while True:
        try:
            guess = input(f"Digite sua tentativa ({WORD_LENGTH} letras): ").strip().lower()
            normalized_guess = remove_accents(guess)

            if len(normalized_guess) != WORD_LENGTH:
                print(f"Erro: A palavra deve ter exatamente {WORD_LENGTH} letras.")
            elif normalized_guess not in valid_words:
                print("Erro: Palavra inv√°lida ou n√£o reconhecida. Tente novamente.")
            else:
                return normalized_guess # Returns the version without accents and lowercase
        except EOFError: # Ctrl+D / Ctrl+Z
             print("\nSaindo do jogo.")
             sys.exit()
        except KeyboardInterrupt: # Ctrl+C
             print("\nSaindo do jogo.")
             sys.exit()


def check_guess(guess, secret_word):
    # Compares the guess with the secret word and generates formatted feedback.
    if len(guess) != WORD_LENGTH or len(secret_word) != WORD_LENGTH:
        return "Erro interno: Tamanho inv√°lido", False

    visual_feedback = [''] * WORD_LENGTH # Stores the formatted symbols/colors
    is_correct = (guess == secret_word)

    if is_correct:
        # If correct, all letters are green
        for i in range(WORD_LENGTH):
             visual_feedback[i] = LETTER_CORRECT_POS_FORMAT.format(guess[i].upper())
        return " ".join(visual_feedback), True
    
    # Count occurrences of each letter in the secret word
    secret_letter_counts = {} 
    for letter in secret_word:
        secret_letter_counts[letter] = secret_letter_counts.get(letter, 0) + 1

    # Mark correct letters and decrease count
    for i in range(WORD_LENGTH):
        guess_letter = guess[i]
        if guess_letter == secret_word[i]:
            visual_feedback[i] = LETTER_CORRECT_POS_FORMAT.format(guess_letter.upper())
            secret_letter_counts[guess_letter] -= 1 # Used one occurrence of this letter

    # Mark letters present but in the wrong place or absent
    for i in range(WORD_LENGTH):
        # Only process if not already marked as green
        if visual_feedback[i] == '':
            guess_letter = guess[i]
            # Check if the letter exists in the secret word AND if there are still occurrences available
            if guess_letter in secret_letter_counts and secret_letter_counts[guess_letter] > 0:
                visual_feedback[i] = LETTER_WRONG_POS_FORMAT.format(guess_letter.upper())
                secret_letter_counts[guess_letter] -= 1 # Used one occurrence for yellow
            else:
                # Letter does not exist or all occurrences have already been used
                visual_feedback[i] = LETTER_ABSENT_FORMAT.format(guess_letter.upper())

    return " ".join(visual_feedback), False 


# Main Game Function 

def play_game():
    #Runs the main loop of the Termo game
    print("\n Bem-vindo ao Termo em Python")

    valid_words = load_words(WORD_LIST_FILE)
    if not valid_words:
        return # Exit if words cannot be loaded

    secret_word = choose_secret_word(valid_words)
    if not secret_word:
        print("Erro: N√£o foi poss√≠vel escolher uma palavra secreta.")
        return

    # Uncomment the line below for debugging (to see the secret word)
    # print(f"(Debug: The secret word is '{secret_word.upper()}')")

    print(f"Tente adivinhar a palavra secreta de {WORD_LENGTH} letras.")
    print(f"Voc√™ tem {MAX_ATTEMPTS} tentativas.")
    if not USE_COLORS:
         print(f"Feedback: {SYMBOL_CORRECT_POS}=Posi√ß√£o Correta, {SYMBOL_WRONG_POS}=Letra Existe, {SYMBOL_ABSENT}=Letra Ausente")

    attempts_made = 0
    feedback_history = []

    while attempts_made < MAX_ATTEMPTS:
        print("-" * 30)
         
        print(f"Tentativa {attempts_made + 1} de {MAX_ATTEMPTS}")

        # Displays the history of previous attempts
        for previous_feedback in feedback_history:
            print(previous_feedback)

        # Gets the player's guess
        current_guess = get_player_guess(valid_words)

        # Checks the guess and gets feedback
        feedback, is_correct = check_guess(current_guess, secret_word)
        feedback_history.append(feedback) # Adds the current feedback to the history

        # Shows the updated history, including the last attempt
        print("\n Hist√≥rico ")
        for feedback_line in feedback_history: # Renamed loop variable 'fb' to 'feedback_line'
            print(feedback_line)
        print("-------------------")

        if is_correct:
            print("\n=======================================")
            if USE_COLORS:
                 
                print(f"{COLOR_GREEN}Parab√©ns! Voc√™ acertou a palavra!{COLOR_RESET}")
            else:
                 
                 print("Parab√©ns! Voc√™ acertou a palavra!")
             
            print(f"A palavra era: {secret_word.upper()}")
            print("========================================")
            return # End of game (victory)

        attempts_made += 1

    # If the loop finishes, the player lost
    print("\n=======================================")
    if USE_COLORS:
         
        print(f"{COLOR_GRAY}Voc√™ usou todas as suas tentativas!{COLOR_RESET}")
    else:
         
        print("Voc√™ usou todas as suas tentativas!")
    
    print(f"A palavra secreta era: {secret_word.upper()}")
    print("======================================")


if __name__ == "__main__":
    play_game()
